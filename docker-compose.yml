version: '3.7'
services:
 # MYSQL DB For Order Service
  mysql-db-order:
    container_name: mysql-db-order
    image: mysql:latest
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: 'order-service'
    volumes:
      - mysql-order:/var/lib/mysql
    ports:
      - "3307:3306"

  # MYSQL DB For Inventory Service
  mysql-db-inventory:
    container_name: mysql-db-inventory
    image: mysql:latest
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: 'inventory-service'
    volumes:
      - mysql-inventory:/var/lib/mysql
    ports:
      - "3308:3306"

  # Mongo Docker Compose Config
  mongo:
    container_name: mongo
    image: mongo:4.4.14-rc0-focal
    restart: always
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./mongo-data:/data/db
  # Keycloak MySQL Docker Compose Config
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:latest
    volumes:
      - ./mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password

  # Keycloak  Docker Compose Config
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:21.1.1
    command: [ "start-dev", "--import-realm" ]
    restart: unless-stopped
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    ports:
      - "8181:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

  # Kafka  Zookeeper Docker Compose Config
  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  # Kafka  Broker Docker Compose Config
  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  # Zipkin
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"

  # Eureka Server
  discovery-server:
    image: domdevs/discovery-server:latest
    container_name: discovery-server
    ports:
      - "8761:8761"
    environment:
      SPRING_APPLICATION_JSON: '{
                      "server.port" : "8761",
                      "management.zipkin.tracing.endpoint" : "http://zipkin:9411"
                                     }'
    depends_on:
      - zipkin

  # API Gateway
  api-gateway:
    image: domdevs/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8080:8080"
    expose:
      - "8080"
    environment:
      SPRING_APPLICATION_JSON: '{
            "server.port":"8080",
            "eureka.client.serviceUrl.defaultZone" : "http://discovery-server:8761/eureka",
            "spring.security.oauth2.resourceserver.jwt.issuer-uri" : "http://keycloak:8080/realms/dom-devs-ecommerce-microservice",
            "management.zipkin.tracing.endpoint" : "http://zipkin:9411",
            "app.eureka-server" : "discovery-server",
            "logging.level.org.springframework.security" : "trace"
                               }'
    depends_on:
      - zipkin
      - discovery-server
      - keycloak

  # Product-Service Docker Compose Config
  product-service:
    container_name: product-service
    image: domdevs/product-service:latest
    environment:

      SPRING_APPLICATION_JSON: '{
                      "spring.data.mongodb":"mongo",
        "spring.data.mongodb.port" : "27017",
        "spring.data.mongodb.database" : "product-service",
        "management.zipkin.tracing.endpoint" : "http://zipkin:9411",
        "server.port" : "8080",
        "eureka.client.serviceUrl.defaultZone" : "http://discovery-server:8761/eureka"
                                     }'
    depends_on:
      - mongo
      - discovery-server
      - api-gateway

  # Order-Service Docker Compose Config
  order-service:
    container_name: order-service
    image: domdevs/order-service:latest
    environment:
      SPRING_APPLICATION_JSON: '{
                                  "spring.datasource.url"  : "jdbc:mysql://mysql-db-order:3306/order-service?allowPublicKeyRetrieval=true",
                                  "spring.datasource.username" : "root",
                                  "spring.datasource.password" : "password",
                                  "spring.jpa.hibernate.ddl-auto" : "update",
                                 "org.hibernate.dialect.Dialect" : "org.hibernate.dialect.MySQL8Dialect",
                                 "server.port" : "8080",
                                 "management.zipkin.tracing.endpoint" : "http://zipkin:9411",
                                 "eureka.client.serviceUrl.defaultZone" : "http://discovery-server:8761/eureka",
                                 "spring.kafka.bootstrap-servers" : "broker:29092"
                                }'
    depends_on:
      - mysql-db-order
      - broker
      - zipkin
      - discovery-server
      - api-gateway

  # Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    image: domdevs/inventory-service:latest
    environment:

      SPRING_APPLICATION_JSON: '{
                              "spring.datasource.url"  : "jdbc:mysql://mysql-db-inventory:3306/inventory-service?allowPublicKeyRetrieval=true",
                              "spring.datasource.username" : "root",
                              "spring.datasource.password" : "password",
                              "spring.jpa.hibernate.ddl-auto" : "update",
                             "org.hibernate.dialect.Dialect" : "org.hibernate.dialect.MySQL8Dialect",
                             "server.port" : "8080",
                             "management.zipkin.tracing.endpoint" : "http://zipkin:9411",
                             "eureka.client.serviceUrl.defaultZone" : "http://discovery-server:8761/eureka"
                            }'
    depends_on:
      - mysql-db-inventory
      - discovery-server
      - api-gateway


    # Notification-Service Docker Compose Config
  notification-service:
    container_name: notification-service
    image: domdevs/notification-service:latest
    environment:
      SPRING_APPLICATION_JSON: '{
                            "spring.kafka.bootstrap-servers":"broker:29092",
                            "eureka.client.serviceUrl.defaultZone" : "http://discovery-server:8761/eureka",
                            "management.zipkin.tracing.endpoint" : "http://zipkin:9411"
                                     }'
    depends_on:
      - zipkin
      - broker
      - discovery-server
      - api-gateway

volumes:
  mysql-order:
  mysql-inventory: